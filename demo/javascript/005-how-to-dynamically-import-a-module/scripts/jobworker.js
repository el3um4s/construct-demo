'use strict';self.dispatchPort=null;self.outputPort=null;self.workerNumber=-1;self.activeJobId=null;self.sentBlobs=new Map;self.sentBuffers=new Map;self.JobHandlers={};function FlipImageData(a,b,c){b*=4;const e=new Uint8Array(b);a=a.buffer;for(let f=0,h=Math.floor(c/2);f<h;++f){var d=c-f-1;const g=new Uint8Array(a,f*b,b);d=new Uint8Array(a,d*b,b);e.set(g);g.set(d);d.set(e)}}
function UnpremultiplyImageData(a){for(let c=0,e=a.length;c<e;c+=4){var b=a[c+3];255!==b&&(b=255/b,a[c]*=b,a[c+1]*=b,a[c+2]*=b)}}self.JobHandlers.ProcessImageData=function(a){const b=a.buffer,c=new Uint8Array(b),e=a.width,d=a.height;a.flipY&&FlipImageData(c,e,d);a.unpremultiply&&UnpremultiplyImageData(c);return{result:b,transferables:[b]}};
self.addEventListener("message",a=>{a=a.data;const b=a.type;switch(b){case "init":self.workerNumber=a.number;self.dispatchPort=a["dispatch-port"];self.dispatchPort.onmessage=OnDispatchWorkerMessage;self.outputPort=a["output-port"];break;case "terminate":self.close();break;default:console.error("unknown message '"+b+"'")}});function SendReady(){self.dispatchPort.postMessage({type:"ready"});self.outputPort.postMessage({type:"ready"})}
function SendError(a,b){a||self.outputPort.postMessage({type:"error",jobId:self.activeJobId,error:b.toString()});SendDone()}function SendResult(a,b){a||self.outputPort.postMessage({type:"result",jobId:self.activeJobId,result:b.result},b.transferables||[]);SendDone()}function SendDone(){self.activeJobId=null;self.dispatchPort.postMessage({type:"done"})}function SendProgress(a){self.outputPort.postMessage({type:"progress",jobId:self.activeJobId,progress:a})}
function OnDispatchWorkerMessage(a){a=a.data;const b=a.type;if("_import_scripts"===b)importScripts(...a.scripts);else if("_send_blob"===b)self.sentBlobs.set(a.id,a.blob);else if("_send_buffer"===b)self.sentBuffers.set(a.id,a.buffer);else if("_testMessageChannel"===b)self.outputPort.postMessage({type:"_testMessageChannelOk"});else if("_ready"===b)SendReady();else{var c=a.isBroadcast,e=a.params;self.activeJobId=a.jobId;if(self.JobHandlers.hasOwnProperty(b)){try{var d=self.JobHandlers[b](e)}catch(f){SendError(c,
"Exception in job handler: "+f);return}d&&d.then?d.then(a=>SendResult(c,a)).catch(a=>SendError(c,"Rejection in job handler: "+a)):SendResult(c,d)}else console.error(`no handler for message type '${b}'`)}};
